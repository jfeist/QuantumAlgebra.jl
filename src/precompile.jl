# Use
#    @warnpcfail precompile(args...)
# if you want to be warned when a precompile directive fails
macro warnpcfail(ex::Expr)
    modl = __module__
    file = __source__.file === nothing ? "?" : String(__source__.file)
    line = __source__.line
    quote
        $(esc(ex)) || @warn """precompile directive
     $($(Expr(:quote, ex)))
 failed. Please report an issue in $($modl) (after checking for duplicates) or remove this directive.""" _file=$file _line=$line
    end
end


function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{Core.kwftype(typeof(Base.Sort.sort!)),NamedTuple{(:lt,),Tuple{typeof(QuantumAlgebra.CorrExpTup_isless)}},typeof(sort!),Array{Tuple{Int,Int},1}})
    Base.precompile(Tuple{Core.kwftype(typeof(Base.Sort.sort!)),NamedTuple{(:lt,),Tuple{typeof(QuantumAlgebra.CorrExpTup_isless)}},typeof(sort!),Array{Tuple{Int,Vararg{Int,N} where N},1}})
    Base.precompile(Tuple{Core.kwftype(typeof(Base.cat_t)),NamedTuple{(:dims,),Tuple{Val{1}}},typeof(Base.cat_t),Type{BaseOperator},Array{BaseOperator,1},Vararg{Any,N} where N})
    Base.precompile(Tuple{Type{Array{Tuple{OpTerm,Number},1}},UndefInitializer,Int})
    Base.precompile(Tuple{Type{Array{Tuple{OpTerm,Real},1}},UndefInitializer,Int})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(corr),Tuple{Array{OpSum,1}}})
    Base.precompile(Tuple{Type{QuantumAlgebra.replace_inds},Pair{OpIndex,OpIndex},Vararg{Pair{OpIndex,OpIndex},N} where N})
    Base.precompile(Tuple{typeof(!=),OpSum,OpSum})
    Base.precompile(Tuple{typeof(*),Float64,OpSum,OpSum,OpSum})
    Base.precompile(Tuple{typeof(*),Int,OpSum,OpSum,OpSum,OpSum,OpSum,Vararg{OpSum,N} where N})
    Base.precompile(Tuple{typeof(*),Int,OpSum,OpSum,OpSum,OpSum})
    Base.precompile(Tuple{typeof(*),Int,OpSum,OpSum,OpSum})
    Base.precompile(Tuple{typeof(*),Int,OpSum,OpSum})
    Base.precompile(Tuple{typeof(*),OpSum,Int})
    Base.precompile(Tuple{typeof(*),OpSum,OpSum,OpSum,OpSum,OpSum,OpSum,Vararg{OpSum,N} where N})
    Base.precompile(Tuple{typeof(*),OpSum,OpSum,OpSum,OpSum})
    Base.precompile(Tuple{typeof(*),OpSum,OpSum,OpSum})
    Base.precompile(Tuple{typeof(*),OpSum,OpSum})
    Base.precompile(Tuple{typeof(*),Rational{Int},OpSum,OpSum})
    Base.precompile(Tuple{typeof(+),OpSum,Complex{Rational{Int}}})
    Base.precompile(Tuple{typeof(+),OpSum,Float64})
    Base.precompile(Tuple{typeof(+),OpSum,OpSum,OpSum,OpSum,OpSum})
    Base.precompile(Tuple{typeof(+),OpSum,OpSum,OpSum})
    Base.precompile(Tuple{typeof(+),OpSum,OpSum})
    Base.precompile(Tuple{typeof(+),Rational{Int},OpSum})
    Base.precompile(Tuple{typeof(==),OpSum,OpSum})
    Base.precompile(Tuple{typeof(Avac),OpSum})
    Base.precompile(Tuple{typeof(Avac),OpTerm,Complex{Rational{Int}}})
    Base.precompile(Tuple{typeof(Avac),OpTerm,Float64})
    Base.precompile(Tuple{typeof(Avac),OpTerm,Int})
    Base.precompile(Tuple{typeof(Avac),OpTerm,Rational{Int}})
    Base.precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf),typeof(QuantumAlgebra.indices),Array{Param,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf),typeof(QuantumAlgebra.indices),Array{QuantumAlgebra.Corr,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf),typeof(QuantumAlgebra.indices),Array{QuantumAlgebra.ExpVal,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf),typeof(QuantumAlgebra.indices),Array{δ,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Array{OpSum,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Array{Any,1},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},typeof(QuantumAlgebra.indices),Tuple{Base.Broadcast.Extruded{Array{OpTerm,1},Tuple{Bool},Tuple{Int}}}},Base.OneTo{Int},Int,Int})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Array{OpIndex,1},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},typeof(QuantumAlgebra.indices),Tuple{Base.Broadcast.Extruded{Array{BaseOperator,1},Tuple{Bool},Tuple{Int}}}},Base.OneTo{Int},Int,Int})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Tuple{OpTerm,Float64},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},Type{Tuple},Tuple{Base.Broadcast.Extruded{Array{Pair{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}},1},Tuple{Bool},Tuple{Int}}}},Base.OneTo{Int},Int,Int})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Tuple{OpTerm,Int},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},Type{Tuple},Tuple{Base.Broadcast.Extruded{Array{Pair{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}},1},Tuple{Bool},Tuple{Int}}}},Base.OneTo{Int},Int,Int})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Tuple{OpTerm,Rational{Int}},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},Type{Tuple},Tuple{Base.Broadcast.Extruded{Array{Pair{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}},1},Tuple{Bool},Tuple{Int}}}},Base.OneTo{Int},Int,Int})
    Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(corr),Tuple{Array{OpSum,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!),Array{Tuple{OpTerm,Number},1},Array{Tuple{OpTerm,Rational{Int}},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},Type{Tuple},Tuple{Base.Broadcast.Extruded{Array{Pair{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}},1},Tuple{Bool},Tuple{Int}}}},Tuple{OpTerm,Complex{Int}},Int,Base.OneTo{Int},Int,Int})
    Base.precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!),Array{Tuple{OpTerm,Real},1},Array{Tuple{OpTerm,Int},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},Type{Tuple},Tuple{Base.Broadcast.Extruded{Array{Pair{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}},1},Tuple{Bool},Tuple{Int}}}},Tuple{OpTerm,Rational{Int}},Int,Base.OneTo{Int},Int,Int})
    Base.precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!),Array{Tuple{OpTerm,Real},1},Array{Tuple{OpTerm,Rational{Int}},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},Type{Tuple},Tuple{Base.Broadcast.Extruded{Array{Pair{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}},1},Tuple{Bool},Tuple{Int}}}},Tuple{OpTerm,Int},Int,Base.OneTo{Int},Int,Int})
    Base.precompile(Tuple{typeof(Base.Order.lt),Base.Order.ForwardOrdering,Tuple{OpTerm,Complex{Int}},Tuple{OpTerm,Rational{Int}}})
    Base.precompile(Tuple{typeof(Base.Order.lt),Base.Order.ForwardOrdering,Tuple{OpTerm,Int},Tuple{OpTerm,Rational{Int}}})
    Base.precompile(Tuple{typeof(Base.Order.lt),Base.Order.ForwardOrdering,Tuple{OpTerm,Rational{Int}},Tuple{OpTerm,Int}})
    Base.precompile(Tuple{typeof(Base.Order.lt),Base.Order.ForwardOrdering,Tuple{OpTerm,Rational{Int}},Tuple{OpTerm,Rational{Int}}})
    Base.precompile(Tuple{typeof(Base.__cat),Array{BaseOperator,1},Tuple{Int},Tuple{Bool},Array{BaseOperator,1},Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.__cat),Array{QuantumAlgebra.Corr,1},Tuple{Int},Tuple{Bool},Array{QuantumAlgebra.Corr,1},Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.__cat),Array{QuantumAlgebra.ExpVal,1},Tuple{Int},Tuple{Bool},Array{QuantumAlgebra.ExpVal,1},Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base._cat_t),Val{1},Type{T} where T,Array{BaseOperator,1},Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base._typed_vcat),Type{Any},Tuple{Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{OpIndex,1}}})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),OpSum,OpSum,OpSum,OpSum,OpSum,OpSum,OpSum})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),OpSum,OpSum,OpSum,OpSum,OpSum})
    Base.precompile(Tuple{typeof(Base.allocatedinline),Type{BaseOperator}})
    Base.precompile(Tuple{typeof(Base.allocatedinline),Type{OpIndex}})
    Base.precompile(Tuple{typeof(Base.allocatedinline),Type{OpTerm}})
    Base.precompile(Tuple{typeof(Base.allocatedinline),Type{QuantumAlgebra.Corr}})
    Base.precompile(Tuple{typeof(Base.allocatedinline),Type{QuantumAlgebra.ExpVal}})
    Base.precompile(Tuple{typeof(Base.allocatedinline),Type{δ}})
    Base.precompile(Tuple{typeof(Base.cat_similar),Array{BaseOperator,1},Type{T} where T,Tuple{Int}})
    Base.precompile(Tuple{typeof(Base.deepcopy_internal),Array{Param,1},IdDict{Any,Any}})
    Base.precompile(Tuple{typeof(Base.deepcopy_internal),Array{QuantumAlgebra.Corr,1},IdDict{Any,Any}})
    Base.precompile(Tuple{typeof(Base.deepcopy_internal),Array{QuantumAlgebra.ExpVal,1},IdDict{Any,Any}})
    Base.precompile(Tuple{typeof(Base.deepcopy_internal),Array{δ,1},IdDict{Any,Any}})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{OpSum,OpSum},Int})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{OpTerm,Float64},Int})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{OpTerm,Rational{Int}},Int})
    Base.precompile(Tuple{typeof(Base.is_quoted),OpSum})
    Base.precompile(Tuple{typeof(Base.promote_eltype),Array{Any,1},Array{OpIndex,1}})
    Base.precompile(Tuple{typeof(Base.show_unquoted),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},OpSum,Int,Int,Int})
    Base.precompile(Tuple{typeof(Base.vect),OpSum,Vararg{OpSum,N} where N})
    Base.precompile(Tuple{typeof(Core.Compiler.eltype),Type{Array{Array{OpIndex,1},1}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Complex{Float64},Complex{Float64}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Complex{Float64},Float64})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Complex{Float64},Int})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Complex{Int},Complex{Int}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Complex{Int},Int})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Complex{Rational{Int}},Complex{Rational{Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Complex{Rational{Int}},Int})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Complex{Rational{Int}},Rational{Int}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Float64,Float64})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Float64})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Int,Int})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Int,Rational{Int}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Rational{Int},Int})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Rational{Int},Rational{Int}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_sum_term!),OpSum,OpTerm,Rational{Int}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_with_normal_order!),OpSum,OpTerm,Complex{Int}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_with_normal_order!),OpSum,OpTerm,Complex{Rational{Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_with_normal_order!),OpSum,OpTerm,Float64})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_with_normal_order!),OpSum,OpTerm,Int})
    Base.precompile(Tuple{typeof(QuantumAlgebra._add_with_normal_order!),OpSum,OpTerm,Rational{Int}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),OpTerm,Complex{Rational{Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),OpTerm,Float64})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),OpTerm,Int})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),OpTerm,Rational{Int}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.make_indices),Int,Int,Symbol})
    Base.precompile(Tuple{typeof(QuantumAlgebra.make_indices),Int,Symbol})
    Base.precompile(Tuple{typeof(QuantumAlgebra.make_indices),Symbol,Int})
    Base.precompile(Tuple{typeof(QuantumAlgebra.make_indices),Symbol,Symbol,Int})
    Base.precompile(Tuple{typeof(QuantumAlgebra.parse_paramstr),String})
    Base.precompile(Tuple{typeof(QuantumAlgebra.print_term_scalar),Base.GenericIOBuffer{Array{UInt8,1}},OpTerm,Complex{Int},Bool})
    Base.precompile(Tuple{typeof(QuantumAlgebra.print_term_scalar),Base.GenericIOBuffer{Array{UInt8,1}},OpTerm,Int,Bool})
    Base.precompile(Tuple{typeof(QuantumAlgebra.print_term_scalar),Base.GenericIOBuffer{Array{UInt8,1}},OpTerm,Rational{Int},Bool})
    Base.precompile(Tuple{typeof(QuantumAlgebra.simplify_number),Float64})
    Base.precompile(Tuple{typeof(QuantumAlgebra.simplify_number),Rational{Int}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.symmetric_index_nums),OpSum})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,NTuple{4,Tuple{Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,Tuple{NTuple{4,Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,Tuple{Tuple{Int,Int,Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,Tuple{Tuple{Int,Int},Tuple{Int,Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,Tuple{Tuple{Int,Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,Tuple{Tuple{Int},Tuple{Int,Int,Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,Tuple{Tuple{Int},Tuple{Int,Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,Tuple{Tuple{Int},Tuple{Int},Tuple{Int,Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,Tuple{Tuple{Int},Tuple{Int},Tuple{Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,Tuple{Tuple{Int},Tuple{Int}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.term2corr),OpTerm,Tuple{Tuple{Int}}})
    Base.precompile(Tuple{typeof(adjoint),OpSum})
    Base.precompile(Tuple{typeof(ascorr),OpSum})
    Base.precompile(Tuple{typeof(collect),Tuple{OpIndex}})
    Base.precompile(Tuple{typeof(comm),OpSum,OpSum})
    Base.precompile(Tuple{typeof(convert),Type{DataType},Type{OpTerm}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},QuantumAlgebra.reorder_suminds,Tuple{Array{QuantumAlgebra.Corr,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},QuantumAlgebra.reorder_suminds,Tuple{Array{QuantumAlgebra.ExpVal,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},QuantumAlgebra.replace_inds,Tuple{Array{QuantumAlgebra.Corr,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},QuantumAlgebra.replace_inds,Tuple{Array{QuantumAlgebra.ExpVal,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},QuantumAlgebra.shift_sumind,Tuple{Array{QuantumAlgebra.Corr,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},QuantumAlgebra.shift_sumind,Tuple{Array{QuantumAlgebra.ExpVal,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},typeof(QuantumAlgebra.indices),Tuple{Array{OpTerm,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},typeof(adjoint),Tuple{Array{QuantumAlgebra.Corr,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},typeof(adjoint),Tuple{Array{QuantumAlgebra.ExpVal,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},typeof(latex),Tuple{Array{QuantumAlgebra.Corr,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},typeof(latex),Tuple{Array{QuantumAlgebra.ExpVal,1}}}})
    Base.precompile(Tuple{typeof(enumerate),Array{Tuple{OpTerm,Float64},1}})
    Base.precompile(Tuple{typeof(enumerate),Array{Tuple{OpTerm,Int},1}})
    Base.precompile(Tuple{typeof(enumerate),Array{Tuple{OpTerm,Number},1}})
    Base.precompile(Tuple{typeof(enumerate),Array{Tuple{OpTerm,Real},1}})
    Base.precompile(Tuple{typeof(isapprox),OpSum,OpSum})
    Base.precompile(Tuple{typeof(isempty),OpTerm})
    Base.precompile(Tuple{typeof(iterate),Array{OpSum,1}})
    Base.precompile(Tuple{typeof(iterate),Array{Tuple{OpSum,OpSum},1}})
    Base.precompile(Tuple{typeof(iterate),Base.Iterators.Enumerate{Array{Tuple{OpTerm,Float64},1}},Tuple{Int,Int}})
    Base.precompile(Tuple{typeof(iterate),Base.Iterators.Enumerate{Array{Tuple{OpTerm,Float64},1}},Tuple{Int}})
    Base.precompile(Tuple{typeof(iterate),Base.Iterators.Enumerate{Array{Tuple{OpTerm,Int},1}},Tuple{Int,Int}})
    Base.precompile(Tuple{typeof(iterate),Base.Iterators.Enumerate{Array{Tuple{OpTerm,Int},1}},Tuple{Int}})
    Base.precompile(Tuple{typeof(iterate),Base.Iterators.Enumerate{Array{Tuple{OpTerm,Number},1}},Tuple{Int,Int}})
    Base.precompile(Tuple{typeof(iterate),Base.Iterators.Enumerate{Array{Tuple{OpTerm,Number},1}},Tuple{Int}})
    Base.precompile(Tuple{typeof(iterate),Base.Iterators.Enumerate{Array{Tuple{OpTerm,Real},1}},Tuple{Int,Int}})
    Base.precompile(Tuple{typeof(iterate),Base.Iterators.Enumerate{Array{Tuple{OpTerm,Real},1}},Tuple{Int}})
    Base.precompile(Tuple{typeof(latex),Float64})
    Base.precompile(Tuple{typeof(latex),OpSum})
    Base.precompile(Tuple{typeof(latex),OpTerm})
    Base.precompile(Tuple{typeof(latex),Rational{Int}})
    Base.precompile(Tuple{typeof(normal_form),OpSum})
    Base.precompile(Tuple{typeof(param),QuantumAlgebra.NameIndex,Char,Int,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(param),QuantumAlgebra.NameIndex,Char,Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Array{Any,1}})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Array{Int,1}})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Array{Symbol,1}})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Int})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Symbol,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Tuple{}})
    Base.precompile(Tuple{typeof(param),Symbol,Char})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},BaseOperator})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},OpIndex})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},QuantumAlgebra.Corr})
    Base.precompile(Tuple{typeof(setindex!),Array{Tuple{OpTerm,Float64},1},Tuple{OpTerm,Float64},Int})
    Base.precompile(Tuple{typeof(setindex!),Array{Tuple{OpTerm,Int},1},Tuple{OpTerm,Int},Int})
    Base.precompile(Tuple{typeof(setindex!),Array{Tuple{OpTerm,Rational{Int}},1},Tuple{OpTerm,Rational{Int}},Int})
    Base.precompile(Tuple{typeof(setindex!),Array{Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int, OpTerm},1},OpTerm,Int})
    Base.precompile(Tuple{typeof(setindex!),Dict{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}},Complex{Rational{Int}},OpTerm})
    Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},Array{BaseOperator,1}})
    Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},Array{Param,1}})
    Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},Array{QuantumAlgebra.Corr,1}})
    Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},Array{QuantumAlgebra.ExpVal,1}})
    Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},Array{δ,1}})
    Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},Dict{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}}})
    Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},NTuple{5,OpIndex}})
    Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},QuantumAlgebra.OpType})
    Base.precompile(Tuple{typeof(show),IOContext{Base.GenericIOBuffer{Array{UInt8,1}}},QuantumAlgebra.SpatialIndex})
    Base.precompile(Tuple{typeof(similar),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},Type{Tuple},Tuple{Base.Broadcast.Extruded{Array{Pair{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}},1},Tuple{Bool},Tuple{Int}}}},Type{Tuple{OpTerm,Float64}}})
    Base.precompile(Tuple{typeof(similar),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},Type{Tuple},Tuple{Base.Broadcast.Extruded{Array{Pair{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}},1},Tuple{Bool},Tuple{Int}}}},Type{Tuple{OpTerm,Int}}})
    Base.precompile(Tuple{typeof(similar),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},Type{Tuple},Tuple{Base.Broadcast.Extruded{Array{Pair{OpTerm,Union{Complex{Rational{Int}}, Complex{Float64}, Complex{Int}, Rational{Int}, Float64, Int}},1},Tuple{Bool},Tuple{Int}}}},Type{Tuple{OpTerm,Rational{Int}}}})
    Base.precompile(Tuple{typeof(similar),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int}},typeof(QuantumAlgebra.indices),Tuple{Base.Broadcast.Extruded{Array{OpTerm,1},Tuple{Bool},Tuple{Int}}}},Type{Array{Any,1}}})
    Base.precompile(Tuple{typeof(sizeof),BaseOpProduct})
    Base.precompile(Tuple{typeof(sizeof),BaseOperator})
    Base.precompile(Tuple{typeof(sizeof),OpIndex})
    Base.precompile(Tuple{typeof(sizeof),OpSum})
    Base.precompile(Tuple{typeof(sizeof),OpTerm})
    Base.precompile(Tuple{typeof(sizeof),QuantumAlgebra.Corr})
    Base.precompile(Tuple{typeof(sizeof),QuantumAlgebra.NameIndex})
    Base.precompile(Tuple{typeof(sort!),Array{Tuple{OpTerm,Float64},1}})
    Base.precompile(Tuple{typeof(sort!),Array{Tuple{OpTerm,Int},1}})
    Base.precompile(Tuple{typeof(sort!),Array{Tuple{OpTerm,Number},1}})
    Base.precompile(Tuple{typeof(sort!),Array{Tuple{OpTerm,Real},1}})
    Base.precompile(Tuple{typeof(vacA),OpSum})
    Base.precompile(Tuple{typeof(vacA),OpTerm,Complex{Rational{Int}}})
    Base.precompile(Tuple{typeof(vacA),OpTerm,Float64})
    Base.precompile(Tuple{typeof(vacA),OpTerm,Int})
    Base.precompile(Tuple{typeof(vacA),OpTerm,Rational{Int}})
    Base.precompile(Tuple{typeof(vacExpVal),OpSum,OpSum})
    Base.precompile(Tuple{typeof(vcat),Array{BaseOperator,1},Array{BaseOperator,1},Array{BaseOperator,1},Vararg{Array{BaseOperator,1},N} where N})
    Base.precompile(Tuple{typeof(vcat),Array{OpIndex,1},Array{OpIndex,1},Array{OpIndex,1},Vararg{Array{OpIndex,1},N} where N})
    Base.precompile(Tuple{typeof(σm),Int})
    Base.precompile(Tuple{typeof(σm),Symbol})
    Base.precompile(Tuple{typeof(σp),Int})
    Base.precompile(Tuple{typeof(σp),Symbol})
    Base.precompile(Tuple{typeof(σx),Int})
    Base.precompile(Tuple{typeof(σx),Symbol,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(σx),Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{typeof(σx),Symbol})
    Base.precompile(Tuple{typeof(σy),Int})
    Base.precompile(Tuple{typeof(σy),Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{typeof(σy),Symbol})
    Base.precompile(Tuple{typeof(σz),Int})
    Base.precompile(Tuple{typeof(σz),Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{typeof(σz),Symbol})
    Base.precompile(Tuple{typeof(∑),Symbol,OpSum})
    isdefined(Base, Symbol("#64#65")) && Base.precompile(Tuple{getfield(Base, Symbol("#64#65")),OpIndex})
    isdefined(QuantumAlgebra, Symbol("#19#20")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#19#20")),Array{BaseOperator,1},Vararg{Array{BaseOperator,1},N} where N})
    isdefined(QuantumAlgebra, Symbol("#19#20")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#19#20")),Array{Param,1},Vararg{Array{Param,1},N} where N})
    isdefined(QuantumAlgebra, Symbol("#19#20")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#19#20")),Array{δ,1},Vararg{Array{δ,1},N} where N})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5")),Int,Vararg{Any,N} where N})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5")),Int})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5")),String})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5")),Symbol,Vararg{Symbol,N} where N})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5")),Symbol})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5"))})
    isdefined(QuantumAlgebra, Symbol("#ann#7")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#7")),Int})
    isdefined(QuantumAlgebra, Symbol("#ann#7")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#7"))})
    isdefined(QuantumAlgebra, Symbol("#cre#6")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#6")),Int,Vararg{Any,N} where N})
    isdefined(QuantumAlgebra, Symbol("#cre#6")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#6")),Int})
    isdefined(QuantumAlgebra, Symbol("#cre#6")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#6")),Symbol,Vararg{Symbol,N} where N})
    isdefined(QuantumAlgebra, Symbol("#cre#6")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#6")),Symbol})
    isdefined(QuantumAlgebra, Symbol("#cre#6")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#6"))})
    isdefined(QuantumAlgebra, Symbol("#cre#8")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#8"))})
end
