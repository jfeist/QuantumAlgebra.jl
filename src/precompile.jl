# Use
#    @warnpcfail precompile(args...)
# if you want to be warned when a precompile directive fails
macro warnpcfail(ex::Expr)
    modl = __module__
    file = __source__.file === nothing ? "?" : String(__source__.file)
    line = __source__.line
    quote
        $(esc(ex)) || @warn """precompile directive
     $($(Expr(:quote, ex)))
 failed. Please report an issue in $($modl) (after checking for duplicates) or remove this directive.""" _file=$file _line=$line
    end
end


function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    @warnpcfail Base.precompile(Tuple{Type{replace_inds},Pair{QuIndex, QuIndex},Vararg{Pair{QuIndex, QuIndex}, N} where N})
    @warnpcfail Base.precompile(Tuple{typeof(*),Complex{Int},QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(*),Complex{Rational{Int}},QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(*),QuExpr,Int})
    @warnpcfail Base.precompile(Tuple{typeof(*),QuExpr,QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(+),Int,QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(+),QuExpr,Complex{Rational{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(+),QuExpr,Float64})
    @warnpcfail Base.precompile(Tuple{typeof(+),QuExpr,Int})
    @warnpcfail Base.precompile(Tuple{typeof(+),QuExpr,QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(+),Rational{Int},QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(-),Int,QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(-),QuExpr,Int})
    @warnpcfail Base.precompile(Tuple{typeof(==),QuExpr,QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(Avac),QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(CorrTup_isless),NTuple{4, Int},Tuple{Int, Int}})
    @warnpcfail Base.precompile(Tuple{typeof(CorrTup_isless),NTuple{6, Int},Tuple{Int, Int, Int}})
    @warnpcfail Base.precompile(Tuple{typeof(CorrTup_isless),NTuple{8, Int},NTuple{4, Int}})
    @warnpcfail Base.precompile(Tuple{typeof(_add_corrs!),QuExpr,QuTerm,Int,typeof(_add_with_normal_order!)})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,ComplexF64,ComplexF64})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,ComplexF64,Float64})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Complex{Int},Complex{Int}})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Complex{Int},Int})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Complex{Int},Rational{Int}})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Complex{Rational{Int}},Complex{Rational{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Complex{Rational{Int}},Int})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Complex{Rational{Int}},Rational{Int}})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Float64,Float64})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Int,Int})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Int,Rational{Int}})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Rational{Int},Int})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Rational{Int},Rational{Int}})
    @warnpcfail Base.precompile(Tuple{typeof(_add_sum_term!),QuExpr,QuTerm,Rational{Int}})
    @warnpcfail Base.precompile(Tuple{typeof(adjoint),QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(boson_ops),Symbol})
    @warnpcfail Base.precompile(Tuple{typeof(comm),QuExpr,QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(corr),QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(expval_as_corrs),QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(fermion_ops),Symbol})
    @warnpcfail Base.precompile(Tuple{typeof(isapprox),QuExpr,QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(isempty),QuTerm})
    @warnpcfail Base.precompile(Tuple{typeof(julia_expression),QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(julia_expression),Param,Nothing})
    @warnpcfail Base.precompile(Tuple{typeof(latex),Complex{Rational{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(latex),Float64})
    @warnpcfail Base.precompile(Tuple{typeof(latex),Int})
    @warnpcfail Base.precompile(Tuple{typeof(latex),QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(latex),QuTerm})
    @warnpcfail Base.precompile(Tuple{typeof(latex),Rational{Int}})
    @warnpcfail Base.precompile(Tuple{typeof(make_indices),Int,Int,Vararg{Any, N} where N})
    @warnpcfail Base.precompile(Tuple{typeof(make_indices),Int,Symbol,Vararg{Any, N} where N})
    @warnpcfail Base.precompile(Tuple{typeof(make_indices),Int,Symbol})
    @warnpcfail Base.precompile(Tuple{typeof(make_indices),Symbol,Int,Vararg{Any, N} where N})
    @warnpcfail Base.precompile(Tuple{typeof(make_indices),Symbol,Int})
    @warnpcfail Base.precompile(Tuple{typeof(make_indices),Symbol,String})
    @warnpcfail Base.precompile(Tuple{typeof(make_indices),Symbol,Symbol,Vararg{Any, N} where N})
    @warnpcfail Base.precompile(Tuple{typeof(normal_form),QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(param),Symbol,Char,Int,Vararg{Any, N} where N})
    @warnpcfail Base.precompile(Tuple{typeof(param),Symbol,Char,Int})
    @warnpcfail Base.precompile(Tuple{typeof(param),Symbol,Char,Symbol,Vararg{Any, N} where N})
    @warnpcfail Base.precompile(Tuple{typeof(param),Symbol,Char,Tuple{}})
    @warnpcfail Base.precompile(Tuple{typeof(param),Symbol,Char,Vector{Any}})
    @warnpcfail Base.precompile(Tuple{typeof(param),Symbol,Char,Vector{Int}})
    @warnpcfail Base.precompile(Tuple{typeof(param),Symbol,Char,Vector{Symbol}})
    @warnpcfail Base.precompile(Tuple{typeof(param),Symbol,Char})
    @warnpcfail Base.precompile(Tuple{typeof(parse_paramstr),String})
    @warnpcfail Base.precompile(Tuple{typeof(print),IOBuffer,BaseOperator})
    @warnpcfail Base.precompile(Tuple{typeof(print),IOBuffer,Corr})
    @warnpcfail Base.precompile(Tuple{typeof(print_term_scalar),IOBuffer,QuTerm,Complex{Int},Bool})
    @warnpcfail Base.precompile(Tuple{typeof(print_term_scalar),IOBuffer,QuTerm,Int,Bool})
    @warnpcfail Base.precompile(Tuple{typeof(print_term_scalar),IOBuffer,QuTerm,Rational{Int},Bool})
    @warnpcfail Base.precompile(Tuple{typeof(show),IOBuffer,MIME{Symbol("text/latex")},QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(simplify_number),Rational{Int}})
    @warnpcfail Base.precompile(Tuple{typeof(symmetric_index_nums),QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,NTuple{4, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,NTuple{4, Tuple{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,NTuple{5, Tuple{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,NTuple{6, Tuple{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,NTuple{7, Tuple{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,NTuple{8, Tuple{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,NTuple{9, Tuple{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{NTuple{4, Int}, NTuple{4, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{NTuple{4, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{NTuple{5, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{NTuple{6, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{NTuple{7, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{NTuple{8, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{NTuple{9, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int, Int, Int}, Tuple{Int, Int, Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int, Int, Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int, Int}, Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, NTuple{4, Int}, NTuple{4, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, NTuple{4, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, NTuple{5, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, NTuple{6, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, NTuple{7, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, NTuple{8, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int, Int, Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int, Int}, Tuple{Int, Int}, Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int, Int}, Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, NTuple{4, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, NTuple{5, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, NTuple{6, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, NTuple{7, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int, Int, Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int, Int}, Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, NTuple{4, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, NTuple{5, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, NTuple{6, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int, Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int}, Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, NTuple{4, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, NTuple{5, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, NTuple{4, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int}, Tuple{Int, Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}, Tuple{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}, Tuple{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(term2corr),QuTerm,Tuple{Tuple{Int}}})
    @warnpcfail Base.precompile(Tuple{typeof(use_σpm),Bool})
    @warnpcfail Base.precompile(Tuple{typeof(vacA),QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(vacExpVal),QuExpr,QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(vacExpVal),QuExpr})
    @warnpcfail Base.precompile(Tuple{typeof(∑),Symbol,QuExpr})
end
